#!/bin/python2.7
#encoding: utf8

import fcntl
import termcolor
import tty, termios
import subprocess
import os
import sys

class g:
    target = '~/.email_post/target/'

def input(msg):
    sys.stdout.write(msg)

    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

    print ch

    return ch.lower()


class Target(object):
    def __init__(self, target):
        to = []
        cc = []

        path = os.path.expanduser(g.target + target)
        if os.path.exists(path):
            lines = open(path).readlines()
            for e in lines:
                e = e.strip()
                if not e:
                    continue

                if e[0] == '#':
                    continue

                t, e = e.split(' ', 1)
                if t.lower() == 'cc':
                    cc.append(e)
                    print("cc: %s" % e)

                if t.lower() == 'to':
                    to.append(e)
                    print("to: %s" % e)
        else:
            print("no target file: %s" % path)
            sys.exit(-1)

        self.to = to
        self.cc = cc





def mp_git(patchs, t):

    cmd = "git send-email {patch} --no-thread --suppress-cc=all --quiet "

    cmd += ' '.join(['--to "%s"' % x for x in t.to])
    cmd += ' '
    cmd += ' '.join(['--cc "%s"' % x for x in t.cc])

    print cmd
    print('')

    char = input('Send Email With this cmd: y/n:')
    if char != 'y':
        return
    print('')

    for patch in patchs:
        c = cmd.format(patch = patch)
        print(">> S: %s" % patch)
        os.system(cmd.format(patch = patch))

def mp_mutt(subject, mail, t):
    to, cc = get_target(target)

    cmd = "mutt -s %s " % subject

    cmd += ' '.join(['"%s"' % x for x in t.to])
    cmd += ' '
    cmd += ' '.join(['-c "%s"' % x for x in t.cc])

    print cmd

    char = input('Send Email With this cmd: y/n:')
    if char != 'y':
        return

    m = open(mail).read()
    p = subprocess.Popen(m, stdin = subprocess.PIPE)
    p.communicate(m)


def mp(args):
    t = Target(args.t)
    if not t.to:
        print("not found to")
        sys.exit(-1)

    print("---------------")

    if args.g:
        mp_git(args.mail, t)



import argparse
parser = argparse.ArgumentParser(description="send email")
mk = parser
mk.add_argument('-t', help="target")
mk.add_argument('-s', help="subject, mutt need this")
mk.add_argument('-g', help="use git send-email for patch", action="store_true")
mk.add_argument('mail', nargs='+')

mk.set_defaults(func=mp)
args = parser.parse_args()
args.func(args)
