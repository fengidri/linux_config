#!/bin/python2.7
#encoding: utf8


import os
import tempfile
import time
import sys
import hashlib

import tty, termios
import git
import subprocess

class g:
    addtional = None

def save_msgid(patch, num):
    f = get_patch_key_path(num)
    if os.path.exists(f):
        return

    for line in open(patch).readlines():
        line = line.split()
        if line[0] == 'Message-Id:':
            msgid = line[1]
            break

    open(f, 'w').write(msgid)

def input(msg):
    sys.stdout.write(msg)

    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

    print ch

    return ch.lower()

def get_patch_key_path(index):
    parent_hash = os.popen('git log --pretty=format:%H -' + str(index + 1)).readlines()[-1].strip()
    branch = os.popen('git rev-parse --abbrev-ref HEAD').read().strip()
    path = os.path.realpath(os.getcwd())

    m = hashlib.md5()
    m.update(parent_hash)
    m.update(branch)
    m.update(path)
    h = m.hexdigest()
    return os.path.expanduser('~/.kernel_patch/%s' % h)



def check_additional(chash):
    path = os.path.expanduser('~/.kernel_patch/addtion')
    if not os.path.exists(path):
        return

    body = git.get_commit_body(chash)

    if body.find('\n---') > -1:
        return

    if g.addtional:
        f = '/tmp/tmp-kernel-patch-%s-%s'  % (time.time(), os.getpid())
        a = open(path).read()
        open(f, 'w').write(a)
        os.system('vim ' + f )
        g.addtional = open(f).read()

    body = body + '\n\n---\n' + g.addtional

    git.commit_change(chash, body)

def cover_edit(patch):
    path = os.path.expanduser('~/.kernel_patch/addtion')
    if os.path.exists(path):
        c = open(patch).read()
        if c.find('\n---') == -1:
            c = c + '\n---\n' + open(path).read()
            open(patch, 'w').write(c)

    os.system('vim ' + patch)




def make_patch(prefix, num):

    chashs = git.get_commit_hash(num)


    if 1 == num:
        check_additional(chashs[0])


    cmd="git format-patch --thread=shallow -%s --subject-prefix '%s'" % (num, prefix)

    if num > 1:
        cmd = cmd + ' -n --cover-letter'

    f = get_patch_key_path(num)
    if os.path.exists(f):
        char = input('Found last msgid, use it as the --in-reply-to Y/N: ')
        if char == 'y':
            cmd = cmd + " --in-reply-to '%s'" % open(f).read().strip()


    print("make patch by cmd:\n$ %s" % cmd)

    patchs = os.popen(cmd).readlines()
    patchs = [x.strip() for x in patchs]
    for p in patchs:
        print '    ' + p

    if num > 1:
        print('\n-----------------------------------------------------')
        print('edit covert')
        cover_edit(patchs[0])

    print('\n-----------------------------------------------------')
    print("run ./scripits/checkpatch.pl")
    for patch in patchs:
        p = subprocess.Popen(['./scripts/checkpatch.pl', patch], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        o,e = p.communicate()
        for line in o.split('\n'):
            if line.startswith('total: '):
                break
        print(patch[0:4] + '   ' + line.strip())



    print('\n-----------------------------------------------------')
    print('try this: https://www.nounplus.net/grammarcheck/')
    return patchs

def send_email(patchs):
    print('\n-----------------------------------------------------')
    for p in patchs:
        print p


    cmd = "git send-email {patch} --no-thread --suppress-cc=all --quiet"

    print cmd

    path = os.path.expanduser('~/.kernel_patch/email')
    if os.path.exists(path):
        lines = open(path).readlines()
        for e in lines:
            e = e.strip()
            print ('    ' + e)
            cmd = cmd + ' ' + e

    char = input('Send Email With this cmd: y/n:')
    if char != 'y':
        return

    save_msgid(patchs[0], num)

    for patch in patchs:
        os.system(cmd.format(patch = patch))


def merge(args):
    send_email(match_patch(args.prefix, args.num))

def _make_patch(args):
    prefix = args.prefix
    num = args.num

    if prefix.find("PATCH") == -1:
        print("prefix must include PATCH")
        return

    make_patch(prefix, num)

def _send(args):
    print args.patchs
    return
    send_email(args.patchs)




import argparse
parser = argparse.ArgumentParser(description="kernel patch")
subparsers = parser.add_subparsers(title='sub command')

mk = subparsers.add_parser('patch')
mk.add_argument('prefix', help="patch prefix")
mk.add_argument('num', help="how many commit used", default=1, type=int)
mk.set_defaults(func=_make_patch)

send = subparsers.add_parser('send')
send.add_argument('patchs', help="patch to send", nargs='+')
send.set_defaults(func=_send)

merge = subparsers.add_parser('merge')
merge.set_defaults(func=merge)

args = parser.parse_args()

args.func(args)



