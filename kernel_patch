#!/bin/python2.7
#encoding: utf8


import os
import tempfile
import time
import sys
import hashlib

import tty, termios
import git
import subprocess
import re
import pty
import fcntl
import termcolor
import email
import json

class g:
    addtional_path  = os.path.expanduser('~/.kernel_patch/addtion')
    rundir          = os.path.expanduser('~/.kernel_patch/run')
    patch_test      = False
    upstream        = False
    rmail_from_path = False
    rmail_from_cmd  = False
    send_target     = None
    msgid_cmd       = 'vim -c Mail'
    msgid_option    = 'MailPrintPath'
    hashs           = []
    info            = None
    email_to        = []
    email_cc        = []
    send            = False


def input(msg):
    sys.stdout.write(msg)

    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

    print ch

    return ch.lower()

def step_msg(msg):
    return termcolor.colored(msg, 'yellow')

class Info(object):
    def __init__(self, hashs):
        self.hashs = hashs
        self.run = {}
        self.path = os.path.join(g.rundir, self.key())

        self.load()

    def load(self):

        if not os.path.isfile(self.path):
            return

        self.run = json.loads(open(self.path).read())

        g.email_to = self.run.get("email_to", [])
        g.email_cc = self.run.get("email_cc", [])

    def key(self):

        cmd = 'git log --pretty=format:%H -' + str(len(self.hashs) + 1)

        parent_hash = os.popen(cmd).readlines()[-1].strip()
        branch = os.popen('git rev-parse --abbrev-ref HEAD').read().strip()
        path = os.path.realpath(os.getcwd())

        m = hashlib.md5()
        m.update(parent_hash)
        m.update(branch)
        m.update(path)
        h = m.hexdigest()

        return h

    def store(self):
        self.run['lasttime'] = time.time()
        self.run['email_to'] = g.email_to
        self.run['email_cc'] = g.email_cc

        c = json.dumps(self.run)
        open(self.path, 'w').write(c)

    def get(self, key):
        return self.run.get(key)

    def set(self, key, value):
        self.run[key] = value


def email_header(to, cc):
        o = []
        list_id = False
        for t in to:
            o.append("--to '%s'" % t)
            if not list_id:
                list_id = True
                if t.find('<') > -1:
                    t = t.split('<')[-1][0:-1]

                o.append("--add-header 'List-ID: <%s>'" % t.replace('@', '.'))
                o.append("--add-header 'X-Mailing-List: %s'" % t)

        for c in cc:
            o.append("--cc '%s'" % c)

        o.append(" --add-header 'X-Mailer: git-send-email 1.8.3.1'")
        o.append(" --add-header 'MIME-Version: 1.0'")
        o.append(" --add-header 'Content-Type: text/plain; charset=us-ascii'")
        o.append(" --add-header 'Precedence: bulk'")

        return ' \n'.join(o)


def email_append():
    def show():
        for e in g.email_to:
            print("  to: %s" % e)
        for e in g.email_cc:
            print("  cc: %s" % e)

    print("Email Addr List:")
    show()

    while True:
        sys.stdout.write('> ')
        line =sys.stdin.readline()
        line = line.strip()
        if not line:
            break

        t = line.split(' ', 1)
        cmd = t[0]

        if cmd == 'show':
            show()
            continue

        if cmd == 'help':
            print("command: ")
            print("     to: add to email addr")
            print("     cc: add cc email addr")
            print("     show: show current email addr")
            print("     del: delete email addr")
            continue;

        if len(t) != 2:
            print("err num")
            continue

        v = t[1]
        if cmd == 'del':
            if v in g.email_to:
                g.email_to.remove(v)
            if v in g.email_cc:
                g.email_cc.remove(v)
            show()
            continue

        if cmd == 'to':
            g.email_to.append(t[1])
            continue
        if cmd == 'cc':
            g.email_cc.append(t[1])
            continue
        print("unknow command: %s" % cmd)


class Target(object):
    def __init__(self, target):
        to = []
        cc = []

        path = os.path.expanduser('~/.kernel_patch/email/' + target)
        if os.path.exists(path):
            lines = open(path).readlines()
            for e in lines:
                e = e.strip()
                if not e:
                    continue

                if e[0] == '#':
                    continue

                t, e = e.split(' ', 1)
                if t.lower() == 'cc':
                    cc.append(e)
                    print("cc: %s" % e)

                if t.lower() == 'to':
                    to.append(e)
                    print("to: %s" % e)
        else:
            print("no target file: %s" % path)
            sys.exit(-1)

        self.to = to
        self.cc = cc

    def format_option(self):
        return email_header(self.to, self.cc)

class RMail(object):
    def __init__(self, path):
        mail = email.message_from_file(open(path))

        print("Got Mail %s\n" % path)

        for key in ['Subject', 'Message-Id', 'Date', 'From', 'To', 'Cc']:
            v = mail.get(key).replace('\n', '').replace('\r', '')
            print("    %s: %s" % (key.ljust(11), v))
        print('')

        self.mail = mail

    def format_option(self):
        o = [ ]

        mail = self.mail

        r = mail.get("Message-Id").strip()
        if r:
            o.append('--in-reply-to: "%s"' % r)

        def p(key):
            h = mail.get(key).replace('\n', '').replace('\r', '').split(',')
            return [x.strip().replace("'", '"') for x in h]

        add_header('--to', 'From')
        add_header('--cc', 'Cc')
        add_header('--cc', 'To')

        to = p('From')
        cc = p('Cc')
        t  = p('To')
        cc.extend(t)

        return ' \n'.join(o) + email_header(to, cc)



class FormatPatch(object):
    def __init__(self, prefix, num):
        self.prefix = prefix
        self.num = num

    def format_patch(self):
        prefix = self.prefix
        num = self.num

        print(step_msg(">> format-patch."))
        cmd="git format-patch  -{num}\n"
        cmd += " --subject-prefix '{prefix}'\n "
        cmd += "{option} {mail} \n"


        m = ''
        if num > 1:
            m = '--thread=shallow -n --cover-letter \n'

        cmd = cmd.format(num = num, prefix = prefix,
                option = m, mail = self.mail_option())

        print("\n$ %s" % cmd)

        cmd = cmd.replace('\n', '')
        patchs = os.popen(cmd).readlines()
        patchs = [x.strip() for x in patchs]

        for p in patchs:
            print '    ' + p

        return patchs

    def mail_option(self):
        mail = self.check_rmail(self.num)

        if mail:
            return mail.format_option()

        if g.send_target:
            return Target(g.send_target).format_option()

        if g.send:
            email_append()
            return email_header(g.email_to, g.email_cc)

        return ''

    def get_reply_to_mail_from_cmd(self):
        key = 'last_reply_mail_path'
        path = g.info.get(key)

        if path and os.path.isfile(path):
            print('check last reply mail path: %s' % path)
            m = RMail(path)
            c = input("Use It: Y/N:")
            if c == 'y':
                return m


        f = '/tmp/mail_path.%s' % time.time()
        os.environ['mail_path'] = f

        prompt = "%s. will start. run: '%s' Y/N:" % (g.msgid_cmd, g.msgid_option)
        c = input(prompt)
        if c != 'y':
            return

        os.system(g.msgid_cmd)

        if not os.path.isfile(f):
            sys.exit(-1)

        path = open(f).read().strip()

        if not os.path.isfile(path):
            sys.exit(-1)

        g.info.set(key, path)

        return RMail(path)


    def check_rmail(self, num):
        if g.rmail_from_path:
            return RMail(g.rmail_from_path)

        if g.rmail_from_cmd:
            return self.get_reply_to_mail_from_cmd()

        if not g.info.get('send_time'):
            return

        print(step_msg('>> check message id'))

        msg = "please input reply mail path or N or R(run command):"

        while True:
            print(msg)

            path = sys.stdin.readline().strip()
            if len(path) != 1:
                RMail(path)
                break

            if path.lower() == 'n':
                return ''

            if path.lower() == 'r':
                return self.get_reply_to_mail_from_cmd()

        return ''



class PatchMulti(object):
    def __init__(self, prefix, num):
        self.prefix = prefix
        self.num = num

    def patch(self):
        prefix = self.prefix
        num = self.num

        if g.patch_test:
            return FormatPatch(self.prefix, self.num).format_patch()

        patchs = FormatPatch(self.prefix, self.num).format_patch()

        cover_path = patchs[0]


        cover_subject = g.info.get('cover_subject')
        cover_body    = g.info.get('cover_body')

        if g.upstream:
            additional = None
        else:
            additional = os.path.isfile(g.addtional_path)

        if cover_subject:
            print("Last Cover Message:")
            print('=' * 70)
            print('Subject: ' + cover_subject)
            print('=' * 70)
            print(cover_body)
            print('=' * 70)

            char = input('Use last cover msg Y/N: ')
            if char == 'y':
               self.fill_cover(cover_path, cover_subject, cover_body)
               additional = False

        if additional:
            self.add_additional(cover_path)
            os.system('vim ' + cover_path)
        else:
            c = input('Edit cover: Y/N: ')
            if c == 'y':
                os.system('vim ' + cover_path)

        self.read_cover(cover_path)

        return patchs

    def read_cover(self, path):
        lines = open(path).readlines()

        body = []
        subject = None

        mode_subject     = 1
        mode_skip_head   = 2
        mode_blurb_white = 3
        mode_blurb_body  = 4
        mode = mode_subject

        for line in lines:
            line = line[0:-1]
            if mode_subject == mode:
                if line.startswith('Subject: '):
                    index = line.find(']')
                    subject = line[index + 1:].strip()
                    mode = mode_skip_head
                continue

            if mode_skip_head == mode:
                if not line:
                    mode = mode_blurb_white
                    continue

                continue

            if mode_blurb_white == mode:
                if not line:
                    continue

                body.append(line)
                mode = mode_blurb_body
                continue

            if mode_blurb_body == mode:
                if re.search(' \(\d+\):$', line):
                    break

                body.append(line)

        g.info.set('cover_subject', subject)
        g.info.set('cover_body', '\n'.join(body))


    def fill_cover(self, path, subject=None, blurb=None):
        lines = open(path).readlines()
        o = []

        for line in lines:
            if line.startswith('Subject: ') and subject:
                line = line.replace('*** SUBJECT HERE ***',
                        subject.encode('utf8'))
                o.append(line)
                continue

            if line == '*** BLURB HERE ***\n':
                if blurb:
                    o.append(blurb.encode('utf8'))
                else:
                    o.append(line)

                continue

            o.append(line)

        open(path, 'w').write(''.join(o))

    def add_additional(self, path):
        lines = open(path).readlines()
        o = []
        for line in lines:
            if line == '*** BLURB HERE ***\n':
                o.append(line)
                o.append('\n')
                o.append('---\n')
                o.append(open(g.addtional_path).read())
                continue

            o.append(line)

        open(path, 'w').write(''.join(o))


class PatchOne(object):
    def __init__(self, prefix):
        self.prefix = prefix

    def patch(self):
        ps =  FormatPatch(self.prefix, 1).format_patch()
        self.check_additional(ps)
        return ps

    def check_additional(self, ps):
        if g.upstream:
            return

        chash = g.hashs

        path = g.addtional_path
        if not os.path.exists(path):
            return

        addtional = g.info.get('addtional')
        if addtional:
            addtional = addtional.encode('utf8')

        if addtional:
            print(addtional)
            c = input('found last addtional. use it Y/N:')
            if c != 'y':
                addtional = None

        if not addtional:
            f = '/tmp/tmp-kernel-patch-%s-%s'  % (time.time(), os.getpid())
            a = open(path).read()
            open(f, 'w').write(a)

            c = input(termcolor.colored('>> check addition.', 'yellow') + ' edit:Y noedit: N skip: S:')
            if c == 'y':
                os.system('vim ' + f )
            elif c == 'n':
                pass
            else:
                return

            addtional = open(f).read()

            g.info.set('addtional', addtional)

        for p in ps:
            lines = open(p).readlines()
            i = lines.index('---\n')
            lines.insert(i + 1, '---\n')
            lines.insert(i + 1, addtional)

            open(p, 'w').write(''.join(lines))




def check_patch(patchs):
    print('\n-----------------------------------------------------')

    print(step_msg(">> run ./scripits/checkpatch.pl"))


    for patch in patchs:
        m, s = pty.openpty()
        flag = fcntl.fcntl(m, fcntl.F_GETFD)
        fcntl.fcntl(m, fcntl.F_SETFL, flag | os.O_NONBLOCK)

        ignore = "FILE_PATH_CHANGES,GIT_COMMIT_ID,COMMIT_LOG_LONG_LINE,COMMIT_MESSAGE,CONFIG_DESCRIPTION,MISSING_SIGN_OFF,NO_AUTHOR_SIGN_OFF,BAD_SIGN_OFF"

        p = subprocess.Popen(['./scripts/checkpatch.pl', '-q', '--show-types', '--ignore', ignore, patch], stdout=s, stderr=s)



        s = ''
        e = False
        while True:
            try:
                buf = os.read(m, 1024)
            except OSError:
                buf = None

            if buf:
                s = s + buf
            else:
                if e:
                    break

                if p.poll() is not None:
                    e = True

        if p.returncode:
            print('')
            for line in s.split('\n'):
                print '| ', line

            print '^ %s %s\n' % (patch, termcolor.colored('fail', 'red'))
        else:
            print '^ %s %s' % (patch, termcolor.colored('success', 'green'))


def process(prefix, num):

    # gen patch
    if 1 == num:
        obj = PatchOne(prefix)
    else:
        obj = PatchMulti(prefix, num)

    ps = obj.patch()


    # check patch
    if not args.skip_checkpatch:
        check_patch(ps)

    # email send
    if not args.s and not args.S and not args.send:
        return

    print('')

    c = input('send email now. Y/N:')
    if c != 'y':
        return

    print("\n")
    print(step_msg(">> send email."))
    for p in ps:
        print('>>> %s' % p)
        msmtp = subprocess.Popen(['msmtp', '-t'], stdin = subprocess.PIPE)
        c = open(p).read()
        msmtp.communicate(c)

    g.info.set('send_time', time.time())


def make_patch(args):
    if args.R:
        g.rmail_from_path = True

    elif args.r:
        g.rmail_from_cmd = True

    g.send_target = args.s
    g.patch_test  = args.t
    g.upstream    = args.u
    g.send        = args.send
    num           = args.num
    prefix        = args.prefix

    if prefix.find("PATCH") == -1:
        print("prefix must include PATCH")
        return


    if num.isdigit():
        num = int(num)
    else:
        lines = os.popen('git log --oneline %s~..HEAD' % num).readlines()
        num = len(lines)
        print("The first commit: %s" % lines[-1].strip())

    g.hashs = git.get_commit_hash(num)

    g.info = Info(g.hashs)

    process(args.prefix, num)

    g.info.store()



import argparse
parser = argparse.ArgumentParser(description="kernel patch")

mk = parser
mk.add_argument('prefix', help="patch prefix")
mk.add_argument('num', help="commit num or first commit")

mk.add_argument('--save-cover', help="use the last 000-0-cover-letter.patch",
        default=False, type=bool)
mk.add_argument('-t', help="for test, skip edit cover", action="store_true")
mk.add_argument('-s', help="send email, special the email list file under ~/.kernel_patch/email/")
mk.add_argument('-S', help="send email, depend the replay mail.", action='store_true')
mk.add_argument('-u', help="upstream patch no alibaba patch", action="store_true")
mk.add_argument('-r', help='get mail file by cmd', action="store_true")
mk.add_argument('-R', help='reply mail file', type=bool)
mk.add_argument('--skip-checkpatch', help="skip checkpatch", action="store_true")
mk.add_argument('--get-maintainer', help="run ./scripts/get_maintainer.pl", action="store_true")
mk.add_argument('--send', help="send email", action="store_true")
mk.set_defaults(func=make_patch)



args = parser.parse_args()

args.func(args)



